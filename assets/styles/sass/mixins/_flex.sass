// _flex.sass

@charset "UTF-8"

// DSIPLAY
// =======
// This defines a flex container inline or block depending on the given value.
// It enables a flex context for all its direct children.
=flexbox
  display: -moz-box
  display: -ms-flexbox
  display: -webkit-flex
  display: flex
  // usage
  // @include flexbox()

=inline-flex($inline)
  display: $inline


// FLEX
// =====
// Having set up a mixin to set the display property to flex
// This is the shorthand for flex-grow, flex-shrink and flex-basis combined.
// The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto.
=flex($grow, $shrink, $basis)
  -moz-box-flex:    $grow $shrink $basis
  -ms-flex:         $grow $shrink $basis
  -webkit-flex:     $grow $shrink $basis
  flex:             $grow $shrink $basis
  // usage
  ///@include flex(0|1|auto)
  // flex: 0|1|auto
  //   flex-grow: 0|1
  //   flex-shrink: 1
  //   flex-basis: 0%|0%|auto

// item fixed width
=flex-fixed-width($width)
  flex-basis: $width
  width:      $width
  max-width:  $width


// ORDER
// ======
// flex-order
=flex-order($order)
  -moz-box-ordinal-group: $order
  -moz-box-ordinal-group: $order
  -ms-flex-order:         $order
  -webkit-order:          $order
  order:                  $order
  // Usage
  // @include flex-order(3)


// DIRECTION
// =========
// Mixins also allow us to use Sassâ€™ @if, @else if, and @else statements to combine what could
// have been two separate mixins into one:
=flex-direction($direction)
  @if $direction == column
    -ms-flex-direction: column
    -webkit-flex-direction: column
    flex-direction: column
  @else
    -ms-flex-direction: row
    -webkit-flex-direction: row
    flex-direction: row
  // Usage
  // @include flex-direction(column|row)


// RESERVE
//========
=flex-reverse-direction($direction)
  @if $direction == column-reverse
    -webkit-flex-direction: vertical
    -moz-flex-direction: vertical
    -ms-flex-direction: column-reverse
    -webkit-flex-direction: column-reverse
    flex-direction: column-reverse
  @else
    -webkit-flex-direction: horizontal
    -moz-flex-direction: horizontal
    -ms-flex-direction: row-reverse
    -webkit-flex-direction: row-reverse
    flex-direction: row-reverse
  // Usage
  // @include flex-direction(column-reverse|row-reverse)


// FLEX WRAP
// =========
// By default, flex items will all try to fit onto one line. You can change that and
// allow the items to wrap as needed with this property. Direction also plays a role here,
// determining the direction new lines are stacked in.
=flex-wrap($value)
  -ms-flex-wrap: $value
  -webkit-flex-wrap: $value
  flex-wrap: $value
// .container
//   flex-wrap: nowrap | wrap | wrap-reverse
//
// nowrap (default): single-line / left to right in ltr; right to left in rtl
// wrap: multi-line / left to right in ltr; right to left in rtl
// wrap-reverse: multi-line / right to left in ltr; left to right in rtl
//



// ALIGNMNET MIXIN
// ===============
=alignment-direct($direction)
  align-items:      flex- + $direction
  justify-content:  flex- + $direction

=alignment-center($direction)
  align-items:      $direction
  justify-content:  $direction

=alignment-space($direction)
  justify-content:  space- + $direction
  align-content:    space- + $direction


